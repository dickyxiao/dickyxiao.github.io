<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Fiddler之进阶篇]]></title>
    <url>%2FFiddler%E4%B9%8B%E8%BF%9B%E9%98%B6%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Fidder该怎么用？启动关闭Fiddler1、fiddler开启：点击File –&gt; Capture Traffic，开启后左下角会有标识（Capturing）显示，同样可以通过点击该标识进行开启与关闭。开启后fiddler就可以抓包。 设置解密HTTPS的网络数据Fiddler可以通过伪造CA证书来欺骗浏览器和服务器.所以Fiddler不仅能监听HTTP请求而且默认情况下也能捕获到HTTPS请求。大概原理就是在浏览器面前Fiddler伪装成一个HTTPS服务器，而在真正的HTTPS服务器面前Fiddler又装成浏览器，从而实现解密HTTPS数据包的目的。1、Tool -&gt; Fiddler Option -&gt; HTTPS下面进行设置，勾选上“Decrypt HTTPS traffic”，如果不必监听服务器端得证书错误可以勾上“Ignore server certification errors”，也可以跳过几个指定的HOST来缩小或者扩大监听范围。2、点击是 移动端抓包Fiddler不但能截获各种浏览器发出的HTTP请求,也可以截获各种智能手机发出HTTP/HTTPS请求。Fiddler能捕获IOS,Andriod,WinPhone,设备发出的请求，同理，也可以截获IPad,MacBook的等设备发出的HTTP/HTTPS。前提条件是：安装Fiddler的机器，跟Iphone在同一个网络里， 否则IPhone不能把HTTP发送到Fiddler的机器上来。步骤如下： Fiddler设置打开Fiddler, Tools-&gt; Fiddler Options。（配置完后记得要重启Fiddler）. 选中”Allow remote computers to connect”.是允许别的机器把HTTP/HTTPS请求发送到Fiddler上来 获取Fiddler所在机器的IP 安装Fiddler证书这一步是为了让Fiddler能捕获HTTPS请求。如果你只需要截获HTTP请求，可以忽略这一步 首先要知道Fiddler所在的机器的IP地址：假如我安装了Fiddler的机器的IP地址是:192.168.1.xxx打开IPhone 的Safari, 访问 http://192.168.1.xxx:8888， 点”FiddlerRoot certificate” 然后安装证书 打开IPhone, 找到你的网络连接，打开HTTP代理，输入Fiddler所在机器的IP地址(比如:192.168.1.xxx) 以及Fiddler的端口号8888 监控面板工具详解Statistics报表统计Fiddler的统计选项卡中显示了当前Session的基本信息，在选项卡的最上方显示的是文本信息，最下方是个饼图，按MIME类型显示流量。使用Statistics页签，用户可以通过选择多个会话来得来这几个会话的总的信息统计，比如多个请求和传输的字节数。选择第一个请求和最后一个请求，可获得整个页面加载所消耗的总体时间。从条形图表中还可以分别出哪些请求耗时最多，从而对页面的访问进行访问速度优化。统计选项卡的一些信息含义如下解释：Request Count：选中的session数；Unique Hosts：流量流向的独立目标主机数。如果所有选中的流量都发送到相同的服务器上，则不会显示该字段。Bytes sent:HTTP请求头和请求体中向外发送的字节总数。后面括号中分别给出了头和body各自的字节数。Bytes received:HTTP请求头和请求体中接收到的所有字节数。在全部计数后面的括号中给出了请求头和请求体各自的字节数。Requests started at:Fiddler接收到的第一个请求的第一个字节的时间点。Responses completed at:Fiddler发送到客户端的最后一个响应的最后一个字节的时间点。Sequence(clock) duration:第一个请求开始到最后一个响应结束之间的 “时钟时间”。Aggregate session duration:所有选中的session从请求到响应之间的时间的和。DNS Lookup time:所有选中的session解析DNS所花费的时间的总和。TCP/IP Connect duration:所有选中session建立TCP/IP连接所花费的时间总和。HTTPS Handshake duration：所有选中session在HTTPS握手上所花费的时间总和。Response Codes：选中session中各个HTTP响应码的计数。Response Bytes by content-type:选中session中响应的各个Content-Type的字节数。Estimated Performance:选中的流量在不同语种(local)地区和连接方式下所需时间的初步估计。 Inspectors对请求解包Inspectors 页签允许你用多种不同格式查看每个请求和响应的内容。 Inspectors 页签分为上下两部分，上部显示的是发出的请求相关信息，下部显示的是接收的响应相关信息。请求 (Request) 部分详解1) Headers —— 显示客户端发送到服务器的 HTTP 请求的 header，显示为一个分级视图，包含了 Web 客户端信息、Cookie、传输状态等2) Textview —— 显示 POST 请求的 body 部分为文本3) WebForms —— 显示请求的 GET 参数 和 POST body 内容，特别说明，这里 body 应该是 application/x-www-form-urlen-coded 格式4) HexView —— 用十六进制数据显示请求5) Auth —— 显示 header 中的 Proxy-Authorization 和 Authorization 信息6) Raw —— 将整个请求显示为纯文本7) XML —— 如果请求的 body 是 XML 格式，就是用分级的 XML 树来显示它 响应 (Response) 部分详解1) Transformer —— 显示响应的编码信息顶部的黄色提示文字表示，此请求为了提高性能，而做了编码或者压缩（例如 GZIP），需要转换后才能在 TextView 里正常浏览。点击该区域或者下面的 Remove HTTP Chunked Encoding按钮，都能执行转换或者解压缩。如果该请求没编码/压缩是看不见此提示的。 HTTP Compression 显示当前请求使用的编码方式 No Compression —— 无压缩 GZIP Encoding —— GZIP 压缩 DEFLATE Encoding —— DEFLATE 压缩 BZIP2 Encoding —— BZIP2 压缩对未编码压缩的请求，可以选择不同的模式，看 Entity Size 里显示压缩后有多大。从而根据这个决定是否需要采用这样的压缩技术来提升网站的性能。2) Headers —— 用分级视图显示响应的 header3) TextView —— 使用文本显示相应的 body4) ImageVies —— 如果请求是图片资源，显示响应的图片。左侧灰色区域会显示图片的大小、宽高、文件格式等信息，在下方还可以选择缩放模式：自动缩放、缩放以适应显示区域大小、无缩放5) HexView —— 用十六进制数据显示响应6) WebView —— 响应在 Web 浏览器中的预览效果7) Auth —— 显示响应 header 中的 Proxy-Authorization 和 Authorization 信息8) Caching —— 显示此请求的缓存信息9) Privacy —— 显示此请求的私密 (P3P) 信息10) Raw —— 将整个响应显示为纯文本11) XML —— 如果响应的 body 是 XML 格式，就是用分级的 XML 树来显示它 AutoResponder文件代理（重定向功能）AutoResponder是fiddler的一个重定向功能，主要是通过对会话的拦截，替换原始资源的功能。默认的一些过滤规则详细的过滤规则无前缀：（搜索到字符串就匹配，不区分大小写）not:发现就不匹配Exact：精确匹配（区分大小写）正则表达式：Fiddler支持以regex:为前缀的正则表达式语法，使用.+匹配一个或多个字符，使用.*匹配0个或多个字符，使用^匹配字符串开始位置，使用$匹配字符串结尾位置。举例一： 登录百度首页 用fiddler抓取请求 保存至本地并修改文件 操作重定向文件，最后点击save 重启fidder，打开百度首页 会话列表这个请求底色为灰色，则表明重定向到这个本地文件了举例二： 同样可以选择默认的正则匹配（无需选择某特定请求，且默认规则可做相应修改） 重启fiddler，打开请求网址，该网页所有被匹配格式的图片都被重定向为本地添加图片 Filters过滤器对一个重新载入的页面进行抓包时，如果包的条目过多而你却只需要关注其中几项时，可以通过Filters进行过滤。切换到Filters标签勾选Use filter，以便激活过滤器，这样下面的各种过滤方式就可以进行选择了。1、Use Filters：勾选则表示使用过滤，不勾选则表示不进行过滤2、Actions：有四个选项 Run Filterset now：立即运行过滤设置； Load Filterset：加载保存的过滤设置； Save Filterset：保存过滤设置； help：帮助 3、勾选左上角的Use Filters开启过滤器，这里有两个最常用的过滤条件：Zone和Host.Zone 指定只显示内网（Intranet）或互联网（Internet）的内容： Host 指定显示某个域名下的会话： 如果框框为黄色（如图），表示修改未生效，点击红圈里的文字即可 4、Client Process：有三个选项 Show only traffic from：根据进程信息进行过滤，选择后，将只显示由该进程发出的请求； Show only Internet Explorer traffic：只关心由IE浏览器发出的请求； Hide traffic from Service Host：隐藏来自service host（即由svchost.exe进程发出）的请求 5、Request Headers：有五个选项 Show only if URL contains：可以通过正则表达式过滤请求地址中包含或不包含的内容，例如REGEX:.(js|css|js\?.|css\?.)$（隐藏所有js和css请求）； Hide if URL contains：与Show only if URL contains相反，一个是显示，一个是隐藏； Flags requests with headers：支持指定某个http请求头名称，如果在web session列表中存在该请求头，会加粗显示该session； Delete requests headers：与Flags requests with headers类似，这里是如果包含该请求头，则删除该请求头； Set request header：将HTTP请求头更新为所输入的值。 6、Breakpoints：断点设置，有四个选项。 Break request on POST：对POST请求设置断点； Break request on GET with query string：会为所有方法为GET且URL中包含了给定查询条件的请求设置断点； Break on XMLHttpRequest：对所有能够确定是通过XMLHTTPRequest对象发送的请求设置断点； Break response on Content-Type：会为所有响应头Content-Type中包含了指定文本的响应设置响应断点。 7、Response Status Code：根据响应状态码设置断点。 8、Response Type and Size：有几种类型，一类是根据响应数据的类型显示或隐藏；一类是根据响应数据的大小显示或隐藏；一类是根据响应所需要的时间设置背景颜色；一类是根据文件类型进行限制。type有以下几种类型： Time HeatMap复选框会基于服务器返回给定响应所需要的时间为每个session设置背景颜色。 9、Response Headers：与Request Headers不同的是，这块区域是针对响应数据的头部进行过滤。 Timeline网站性能分析每个请求都会经历解析、建立连接、发送请求、接受数据等阶段。把多个请求以时间作为 X 轴，用图表的形式展现出来，就形成了瀑布图。在Fiddler中，只要在左侧选中一些请求，右侧选择Timeline标签，就可以看到这些请求的瀑布图 此列表显示在 Web Sessions 面板中选择的 session 请求到响应的时间表。横向是时间轴，以秒为单位；纵向是选择的 session 列表。鼠标移到 Timeline 页签的某一 session 上，在 Timeline页签底部会显示四个数据： Session 编号和 URL Session 的响应类型 发送的字节数 接收的字节数 Composer 构建请求Fiddler的作者把HTTP Request发射器取名叫Composer(中文意思是：乐曲的创造者),以前叫做Request Builder。Fiddler Composer的功能就是用来创建HTTP Request 然后发送。 你可以自定义一个Request, 也可以手写一个Request, 你甚至可以在Web会话列表中拖拽一个已有的Request. 来创建一个新的HTTP Request。Fiddler Composer比其他工具的优势能创建发送HTTP Request的工具很多很多。 但是Fiddler的功能有如下的优势。 能从”Web会话列表”中 拖拽一个先前捕获到的Request, 然后稍微修改一下 发送Request后，还能设置断点，继续修改Request. 支持在Request中上传文件 支持发送多次Request. 举例：登录126邮箱1）登录126邮箱，抓取登录请求，修改username为dickyxiao@test.com，password为123456，最后点击执行2）可清除会话列表中所有请求后再执行，点击该请求查看Inspectors请求的数据及返回信息 内置命令多数命令是存在本地 CustomRules.js 文件中，如果不是最新版 Fiddler，可能没有最新的命令。如果要得到最新的命令，要么删除你的 CustomRules.js，要么复制 SampleRules.js 的 ExecAction 到 CustomRules.js 中。 ?sometextFiddler 会高亮所有 URL 匹配问号后的字符的全部 session。按回车聚焦到匹配的 session 上。范例：?searchtext >size选择响应尺寸大于指定大小的全部 session。按回车聚焦到匹配的 session 上。范例：&gt;40000 （选择响应大于 40kb 的请求） \&lt;size选择响应尺寸大于指定大小的全部 session。按回车聚焦到匹配的 session 上。范例：&lt;5k （选择响应小于 5kb 的请求） =status选择响应 HTTP 状态等于指定值的全部 session。按回车聚焦到匹配的 session 上。范例：=301 （选择 301 重定向的请求） @host选择包含指定 HOST 的全部 session。按回车聚焦到匹配的 session 上。范例：@msn.com （选择 www.msn.com、login.msn.com 等 session） bold sometext加粗显示 URL 包含指定字符的全部 session。范例：bold test.php （加粗显示 URL 中包含 test.php 的 Sessionbold （不带参数表示清空所有加粗显示的 Session） bpafter sometext中断 URL 包含指定字符的全部 session 响应。范例：bpafter test.php （中断 URL 中包含 test.php 的 Sessionbpafter （不带参数表示清空所有设置断点的 Session） bps中断 HTTP 响应状态为指定字符的全部 session 响应。范例：bps 404 （中断所有响应 404 的 Sessionbps （不带参数表示清空所有设置断点的 Session） bpv 或 bpm中断指定请求方式的全部 session 响应。范例：bpv POST （中断所有 POST 请求的 Sessionbpv （不带参数表示清空所有设置断点的 Session） bpu中断请求 URL 中包含指定字符的全部 session 响应。范例：bpu test.php （中断所有请求 URL 中包含指定字符的 Sessionbpu （不带参数表示清空所有设置断点的 Session） cls 或 clear清除所有 session范例：cls dump将所有 session 打包到 C 盘根目录下的一个 zip 压缩包中范例：dump g 或 go继续所有中断的 Session范例：g help用 IE 打开 QuickExec 在线帮助页范例：help hide将 Fiddler 隐藏到任务栏图标中范例：hide urlreplace将 URL 中的字符串替换成特定的字符串范例：urlreplace SeekStr ReplaceWithStrurlreplace （不带参数表示清空所有之前的设置） start将 Fiddler 为系统代理范例：start stop将 Fiddler 从系统代理注销范例：stop show将 Fiddler 从任务栏图标恢复为图形界面，此命令在命令行工具 ExecAction.exe 中使用范例：show slect选择响应类型 (Content-Type) 为指定字符的所有 session范例：slect imageslect cssselect htm allbut 或 keeponly选择响应类型 (Content-Type) 不是指定字符的所有 session范例：allbut xmlallbut java quit退出 Fiddler范例：quit 篡改数据篡改分两种：一种是修改请求数据，检查接口的处理情况，这种适用于不方便直接调接口，其不关心页面，只看接口处理是否正常，返回的数据对不对。比如某网注册页面 用户名限制的字符长度是2-20 ，把字符加到21以上，看效果，根据前端页面的预期结果是提示用户名超长了，而实际结果是注册成功了。于是去数据库查了下表结构，发现用户名字段的长度是50，所以重新注册下，字符超过50，看接口返回的信息，提示“信息输入有误”，OK，测试通过，说明接口在这块做了保护。用刚注册成功的用户名进行登录，提示“账号长度只能在2-20位字符之间”，登录失败。（引申：这些不会生效的数据，被称为脏数据，不改掉会影响到后续性能）在这里做个假设：仍然是上面的例子，页面上注册时提示没成功，但实际数据库中已经保存数据了，这样就算bug了，前端不应该在用户捕获到超过长度的字符时还去调用接口。理论上前后端对于输入参数的限制应该保持一致，但实际上数据库字段长度是要比前两者多的，因为要留有富裕的空间作为优化修改页面请求值 构造请求数据，突破表单的限制，可以随意提交数据，避免页面JS和表单限制，从而影响相关调试（绕过前端）。1、设置断点：Fiddler菜单栏-&gt;Rules-&gt;Automatic Breakpoints-&gt;选择Before Responses，也就是发送请求之后，在Fiddler代理中转之前是可以修改请求数据的。2、观察inspector，页面内容出现变化后修改Body的Value值，然后点击 “Run To Complete“，回到浏览器查看响应结果。从案例分享中，可以知道运单号的长度需&gt;=5，那么调试时就输入3个字符，看看页面的响应是否正常。页面中获取不到提示，显示undefined，说明并没有调用接口。另一种是修改返回包的数据，关心的是页面处理情况。比如理财app上显示金额，那么我们在测试时肯定要考虑金额的长度，此时可以通过篡改数据来看服务端返回不同的结果来看页面显示是否正常。修改页面响应结果（拦截响应数据，修改响应实体）1、设置断点：Fiddler菜单栏-&gt;Rules-&gt;Automatic Breakpoints-&gt;选择After Responses，也就是服务器响应之后，但是在Fiddler将响应中转给客户端之前是可以修改响应的结果。2、观察inspector，页面内容出现变化（说明拦截成功）3、切换到TextView，修改message，然后点击 “Run To Complete“，回到浏览器查看响应结果。 模拟网速进行日常测试时通常网络情况都比较好（内网），所以有时会忽略在低速或网络状况不好的情况下系统页面的表现（前端是怎么处理的）。手机可以用2G、3G、4G，也是一种方式，但这都是网络模式，而Fiddler可以设置上传和下载的延时时间，这种控制非常灵活，可以帮助我们模拟低速网络情况下页面、APP的显示与交互情况，比如响应时间过长时是否有弹出网络不好的提示、页面crash以及显示错乱、session是否一致等。设置限速时间（1）打开 【Rules—Customer Rules】，Ctrl+F搜索（m_SimulateModem），默认发送数据是300毫秒，接收数据是150毫秒，根据实际情况限速后进行保存（Ctrl+S）（2）启用限速：Rules—Performance—Simulate Modem Speeds演示：对于发送数据（uploaded）每KB延迟30000毫秒，接受数据(downloaded)每KB延迟30000毫秒打开浏览器，访问百度，搜索python，页面加载非常慢，等全部加载完成时可以到Statistics查看时间PS：测试结束后记得取消限速 开发环境的host配置TOOLS→HOSTS，然后勾选enable 相关问题解决1、Inspectors的TextView中出现乱码？在注册表编辑器中找到HKEY_CURRENT_USER\Software\Microsoft\Fiddler2，右键新建字符串值 设置HeaderEncoding 的值为GB180302、 为啥获取不到会话？ 手动修改浏览器代理ip地址为：127.0.0.1:8888 检查fiddler捕获开关 检查过滤器设置（filters）3、 Inspectors的Response中的HTML是乱码的？因为HTML被压缩了， 我们可以通过两种方法去解压缩方法一：点击红框内容“Response body is encouded.Click to decode.” 方法二：选中工具栏中的”Decode”。 这样会自动解压缩。 声明：该文章些许内容参考网上相关博客后总结整理所得]]></content>
      <categories>
        <category>接口测试</category>
      </categories>
      <tags>
        <tag>Fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Fiddler之基础篇]]></title>
    <url>%2FFiddler%E4%B9%8B%E5%9F%BA%E7%A1%80%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Fidder是什么？简介Fiddler（中文名称：小提琴）是一个HTTP的调试代理，以代理服务器的方式，监听系统的Http网络数据流动。可以将网络传送接受或发送的数据包进行截获、重发、编辑及转存等操作，亦可以检查数据包网络传输的安全。Fiddler还包含一个简单却功能强大的基于JScript .NET事件脚本子系统，它可以支持众多的HTTP调试任务。 工作原理fidder是以代理web服务器的形式工作的。浏览器与服务器一般默认是通过建立TCP连接、以http协议进行通信，当浏览器向服务器发送请求或接受服务器返回的数据时，fidder就相当于浏览器与服务器的一道关卡，能够截获他们网络传输的数据包。 整体布局介绍主面板 工具面板 两种模式：缓冲模式（Buffering Mode）：Fiddler直到HTTP响应完成时才将数据返回给应用程序。可以控制响应，修改响应数据。但是时序图有时候会出现异常。流模式（Streaming Mode）：Fiddler会即时将HTTP响应的数据返回给应用程序。更接近真实浏览器的性能。时序图更准确,但是不能控制响应。 会话面板 会话图标 状态面板 监控面板（常用） Fidder有什么用？ 分析页面性能 分析http请求/响应数据 设置断点，调试线上错误 伪造数据请求与返回，调试数据接口 设置模拟网速]]></content>
      <categories>
        <category>接口测试</category>
      </categories>
      <tags>
        <tag>Fiddler</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can f4ind the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
</search>
